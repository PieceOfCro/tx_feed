from time import sleep

import requests
from evmdasm import EvmBytecode

# WCRO Bytecode
sample_bytecode = "60c0604052600b60808190526a577261707065642043524f60a81b60a090815261002c9160009190610078565b50604080518082019091526004808252635743524f60e01b602090920191825261005891600191610078565b506002805460ff1916601217905534801561007257600080fd5b50610113565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106100b957805160ff19168380011785556100e6565b828001600101855582156100e6579182015b828111156100e65782518255916020019190600101906100cb565b506100f29291506100f6565b5090565b61011091905b808211156100f257600081556001016100fc565b90565b610780806101226000396000f3fe6080604052600436106100c05760003560e01c8063313ce56711610074578063a9059cbb1161004e578063a9059cbb146102b2578063d0e30db0146102eb578063dd62ed3e146102f3576100cf565b8063313ce5671461023f57806370a082311461026a57806395d89b411461029d576100cf565b806318160ddd116100a557806318160ddd146101ab57806323b872dd146101d25780632e1a7d4d14610215576100cf565b806306fdde03146100d4578063095ea7b31461015e576100cf565b366100cf576100cd61032e565b005b600080fd5b3480156100e057600080fd5b506100e961037d565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561012357818101518382015260200161010b565b50505050905090810190601f1680156101505780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561016a57600080fd5b506101976004803603604081101561018157600080fd5b506001600160a01b03813516906020013561040b565b604080519115158252519081900360200190f35b3480156101b757600080fd5b506101c0610471565b60408051918252519081900360200190f35b3480156101de57600080fd5b50610197600480360360608110156101f557600080fd5b506001600160a01b03813581169160208101359091169060400135610475565b34801561022157600080fd5b506100cd6004803603602081101561023857600080fd5b50356105ed565b34801561024b57600080fd5b506102546106a4565b6040805160ff9092168252519081900360200190f35b34801561027657600080fd5b506101c06004803603602081101561028d57600080fd5b50356001600160a01b03166106ad565b3480156102a957600080fd5b506100e96106bf565b3480156102be57600080fd5b50610197600480360360408110156102d557600080fd5b506001600160a01b038135169060200135610719565b6100cd61032e565b3480156102ff57600080fd5b506101c06004803603604081101561031657600080fd5b506001600160a01b038135811691602001351661072d565b33600081815260036020908152604091829020805434908101909155825190815291517fe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c9281900390910190a2565b6000805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156104035780601f106103d857610100808354040283529160200191610403565b820191906000526020600020905b8154815290600101906020018083116103e657829003601f168201915b505050505081565b3360008181526004602090815260408083206001600160a01b038716808552908352818420869055815186815291519394909390927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925928290030190a350600192915050565b4790565b6001600160a01b0383166000908152600360205260408120548211156104bc576040805162461bcd60e51b8152602060048201526000602482015290519081900360640190fd5b6001600160a01b03841633148015906104fa57506001600160a01b038416600090815260046020908152604080832033845290915290205460001914155b1561057c576001600160a01b0384166000908152600460209081526040808320338452909152902054821115610551576040805162461bcd60e51b8152602060048201526000602482015290519081900360640190fd5b6001600160a01b03841660009081526004602090815260408083203384529091529020805483900390555b6001600160a01b03808516600081815260036020908152604080832080548890039055938716808352918490208054870190558351868152935191937fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929081900390910190a35060019392505050565b3360009081526003602052604090205481111561062b576040805162461bcd60e51b8152602060048201526000602482015290519081900360640190fd5b33600081815260036020526040808220805485900390555183156108fc0291849190818181858888f1935050505015801561066a573d6000803e3d6000fd5b5060408051828152905133917f7fcf532c15f0a6db0bd6d0e038bea71d30d808c7d98cb3bf7268a95bf5081b65919081900360200190a250565b60025460ff1681565b60036020526000908152604090205481565b60018054604080516020600284861615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156104035780601f106103d857610100808354040283529160200191610403565b6000610726338484610475565b9392505050565b60046020908152600092835260408084209091529082529020548156fea26469706673582212206ff40cbea6f33894a38162a81612c9ac5d480dce0d2ef5489ac578d9d008924564736f6c63430006060033"

evmcode = EvmBytecode(sample_bytecode)  # can be hexstr, 0xhexstr or bytes

function_selectors = set()
for instr in evmcode.disassemble():
    if instr.name == "PUSH4":
        function_selectors.add(instr.operand)

for function_selector in function_selectors:
    r = requests.get(
        f"https://www.4byte.directory/api/v1/signatures/?hex_signature={function_selector}"
    )
    while r.status_code != 200:
        sleep(1)
        r = requests.get(
            f"https://www.4byte.directory/api/v1/signatures/?hex_signature={function_selector}"
        )
    r = r.json()
    if r["count"]:
        lowest_id_result = sorted(r["results"], key=lambda x: x["id"])[0]
        print(f"Most likely it is {lowest_id_result['text_signature']}")
    else:
        print(f"Could not find 0x{function_selector}")
